const models = require('./models')const {spiderArticleModel} = modelsconst typeOfData = (data) => {  return Object.prototype.toString.call(data).slice(8, -1)}const clearCollections = async (...collection) => {  try {    await new Promise(() => {      collection.map(item => {        item.deleteMany({}, () => {        })      })    })  } catch (e) {    throw e  }}const insertData = async (data, collections) => {  try {    const insert = new collections(data)    typeOfData(data) === 'Object'      ? insert.save()      : data.map(item => {        const insert = new collections(item)        insert          .save()      })    return '插入成功-------------->'  } catch (e) {    throw e + '----------------------------插入失败!'  }}const updateData = async (collections,query)=>{  try {    let result    console.log(collections.collection.collectionName==='spiderarticles')    const {type,status,unique,userName,phone,password,newName,userId,admin,show,articleId,change,textContent} = query    if (collections.collection.collectionName==='users'){      if (!userId) return {error:'参数不正确!'}      else {       let user = await collections.find({userId})       if (phone){         let phones = await collections.find({phone})         if (phones.length>0){           return {error:'该手机号已注册，请使用其他手机号！'}         }else {           await collections.updateOne({userId},{$set:{phone}})           return {msg:'操作成功！',news:phone}         }       }else if (newName){         let newNames = await collections.find({userName:newName})         if (user[0].userName == newName){           return {error:'原账户名与新账户名相同！'}         }else if (newNames.length>0){           return {error:'该账户名已被注册！'}         }else {         await collections.updateOne({userId},{$set:{userName:newName}})           return {msg:'操作成功！'}         }       }      else if (password){         if (user[0].password == password){           return {error:'新密码不能与旧密码相同！'}         }else {           await collections.updateOne({userId},{$set:{password}})           return {msg:'操作成功！'}         }       }      else if (admin){         await collections.updateOne({userId},{$set:{type:admin}})         return {msg:'操作成功！'}       }      }    }    if (collections.collection.collectionName==='articles'){      //新增文章      let docs = await insertData(query,collections)      console.log(docs,'===')      result = {msg:docs}    }    if (collections.collection.collectionName==='reports'){      let docs = await insertData(query,collections)      return docs    }    if (collections.collection.collectionName==='spiderarticles'){      await collections.update({articleId},{        ...query        },        {upsert:true}        )      return {msg:'操作成功！'}    }    if (show!=undefined){      let search = {}      if (unique) search.unique = unique      if (articleId) search.articleId = articleId      await collections.updateOne(search,{$set:{show}})      return {msg:'操作成功！'}    }    else {      if (!query) return      let file =await collections.find({unique})      //存在则为修改 否则是新增      if (file.length>0){        if (!status) {          return {error:'参数不正确'}        }else{          await collections.updateOne({unique},{$set:{status,show:status==1 ? true :false}})          result = {msg:'操作成功'}        }      }else {        let docs = await insertData(query,collections)        result = {msg:docs}      }    }    if (result) return result  }  catch (e) {      }}const getHref = (content)=> {  if (!content) {    return "";  }  //正则提取字符串中的域名  let urlPattern = /((?:http:\/\/)?w{3}(?:.[\w]+)+)/g  let href  content = content.replace(urlPattern, (match)=> {    href = match;    if (match.indexOf("http") == -1) {      href = "http://" + match;    }  });  return href;}const findData = async (collections,query={})=>{  try {    let result    if (collections.collection.collectionName==='globallists'){      //查询大洲信息时，对数据进行过滤      result = collections.find(query,{"subList":0})    }    else if (collections.collection.collectionName==='articles'){      //文章详情      const {unique,type,pageSize,pageNum,author} = query      if (type){        if (pageSize){          let data = await collections.find({type})          //过滤可以展示的数据          data = data.filter(item=>item.show===true)          //反转数组获取最新的数据          data = data.reverse()          //手动分页          const total = data.length          //slice函数截取时，计算的结果是包括开始位置的数据，但不包括结束位置的数据，需要手动加一          const end = pageSize*pageNum < total-1 ? pageSize*pageNum :total          data = data.slice((pageNum-1)*pageSize,end)          let obj = {            total,            pageSize,            pageNum,            data          }          result = obj        }else if (author){          result = await collections.find({author})        }        else {         return result = await collections.find({type})        }              }else {        if (!unique){          return {error:'参数不正确！'}        }else {           return await collections.findOne({unique})        }      }    }else if (collections.collection.collectionName==='spiderarticles'){      //文章分页      const {type,pageSize,pageNum} = query     if (type){       let data = await collections.find({type})       //过滤可以展示的数据       data = data.filter(item=>item.show===true)       //反转数组获取最新的数据       data = data.reverse()       //由于存储数据与正常数据结构不太相同，这里手动计算分页       const total = data.length       //slice函数截取时，计算的结果是包括开始位置的数据，但不包括结束位置的数据，需要手动加一       const end = pageSize*pageNum < total-1 ? pageSize*pageNum :total       data = data.slice((pageNum-1)*pageSize,end)       let obj = {         total,         pageSize,         pageNum,         data       }       result = obj     }else {       //获取全部       result = await collections.find({})     }    }    else if (collections.collection.collectionName==='users'){      const {userName,password,phone,userId,all} = query     //注册      if (userName && password && phone) {        let name = await collections.find({userName})        let pwd = await collections.find({phone})        if (name.length>0){          result = {error:'该用户名已被注册!'}        }else if (pwd.length>0){          result = {error:'该手机号已被注册!'}        }else {         await insertData(query,collections)          result = {success:'注册成功!'}        }      }else if (userName && password && !phone)      {        //登录        let name = await collections.find({userName})        if (name.length>0){          name[0].password === password ? result = name[0]:result = {error:'密码错误!'}        }else {          result = {error:'该用户不存在！'}        }      }      //获取单个用户信息      else if (userId){       result = await collections.find({userId})        //获取所有用户列表      }else if (all){        result = await collections.find({})      }      else {        result = {error:'操作失败!'}      }    }    else if (collections.collection.collectionName==='reports'){      const {danger} = query      if (danger){        let docs = await collections.find({danger:{$gte:danger}})        return docs      }else {        let docs = await collections.find(query)        return docs      }    }    else result = typeOfData(query)==='Object' ? collections.find(query) : collections.find(...query)    if (result) return result  }  catch(e) {    throw e  }}const fuzzyQuery = async (collections,query={})=>{  try {    let result = []    const {keyWords} = query    if (!keyWords) new Error('参数不正确！')    const reg = new RegExp(keyWords, 'i') //不区分大小写    if(collections.collection.collectionName==='spiderarticles'){      let spider = await collections.find({        $or:[          {title:{$regex:reg}},          //{text:{$regex:reg}},          //{textDate:{$regex:reg}},          //{author:{$regex:reg}},          {date:{$regex:reg}},          //{show:true}        ]      })      console.log(spider.length)      result.push(...spider)    }    if (collections.collection.collectionName==='articles'){      let article = await collections.find({              $or:[                {type:"3"},                {title:{$regex:reg}},                {text:{$regex:reg}},                {textDate:{$regex:reg}},                {author:{$regex:reg}},                //{show:true}              ]            })      result.push(...article)    }    if (collections.collection.collectionName==='reports'){      let report = await collections.find({        $or:[          {start:{$regex:reg}},          {end:{$regex:reg}},          {name:{$regex:reg}},        ]      })      result.push(...report)    }    return result  }  catch (e) {    throw e  }}const deleteData = async (collections,query)=>{  try {    let result    if (!query) return   let docs = await collections.deleteOne(query,(err)=>{      if (err) result = {msg:'删除失败！'}      else result = {msg:'删除成功！'}    })    return result  }  catch (e) {    throw e  }}let allData = []const create = (model, func,methods) => {  if (methods==='post')    return async (req,res,next) => {      let query = req.body      allData = query      try {        let result = await func(model,query)        if (result){          res.send({            meta: {              state: 200,              msg: 'success'            },            content: result          })        }      }      catch(err){        res.send({          meta: {            state: 500,            msg: 'failed',            err          },          content: null        })        throw err      }    }  else if (methods==='get')    return async (req,res)=>{      let query = req.query      const {area,city} = query      if (city){        query =[{area},{"subList": {$elemMatch:{city}}}]      }      //查询语句      // 单层查询 {"area": "贵州"}      //嵌套查询 {"area": "贵州"},{"subList": {$elemMatch:{"city":"遵义"}}}      try {        let result = await func(model,query)        if (result){          res.send({            meta: {              state: 200,              msg: 'success'            },            content: result          })        }      }      catch(err){        res.send({          meta: {            state: 500,            msg: 'failed',            err          },          content: null        })      }    }}module.exports = {  insertData,  clearCollections,  create,  findData,  getHref,  deleteData,  updateData,  fuzzyQuery,}